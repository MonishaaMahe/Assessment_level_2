{"ast":null,"code":"var _jsxFileName = \"C:\\\\project-management-dashboard\\\\src\\\\components\\\\Comments.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Comments({\n  entityType,\n  entityId,\n  currentUser = 'demo-user'\n}) {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  useEffect(() => {\n    if (entityType && entityId) {\n      fetchComments();\n    }\n  }, [entityType, entityId]);\n  const getAuthHeaders = () => {\n    const token = localStorage.getItem('token');\n    return {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    };\n  };\n  const fetchComments = async () => {\n    try {\n      const response = await fetch(`http://localhost:8080/api/comments?entityType=${entityType}&entityId=${entityId}`, {\n        headers: getAuthHeaders()\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setComments(data);\n      }\n    } catch (error) {\n      console.error('Error fetching comments:', error);\n    }\n  };\n  const addComment = async () => {\n    if (!newComment.trim()) return;\n    try {\n      const response = await fetch('http://localhost:8080/api/comments', {\n        method: 'POST',\n        headers: getAuthHeaders(),\n        body: JSON.stringify({\n          entityType,\n          entityId,\n          authorId: currentUser,\n          content: newComment\n        })\n      });\n      if (response.ok) {\n        setNewComment('');\n        fetchComments();\n      }\n    } catch (error) {\n      console.error('Error adding comment:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginTop: '1rem',\n      padding: '1rem',\n      border: '1px solid #ddd',\n      borderRadius: '4px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"Comments (\", comments.length, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: newComment,\n        onChange: e => setNewComment(e.target.value),\n        placeholder: \"Add a comment...\",\n        style: {\n          width: '100%',\n          minHeight: '60px',\n          marginBottom: '0.5rem'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addComment,\n        className: \"btn btn-primary\",\n        children: \"Add Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: '0.5rem',\n          marginBottom: '0.5rem',\n          backgroundColor: '#f9f9f9',\n          borderRadius: '4px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '0.8rem',\n            color: '#666',\n            marginBottom: '0.25rem'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: comment.authorId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this), \" \\u2022 \", new Date(comment.createdAt).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: comment.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)]\n      }, comment.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)), comments.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: '#666',\n          fontStyle: 'italic'\n        },\n        children: \"No comments yet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(Comments, \"MxCDS9ewhkO9e8lz5YjyzEXdntQ=\");\n_c = Comments;\nexport default Comments;\nvar _c;\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Comments","entityType","entityId","currentUser","_s","comments","setComments","newComment","setNewComment","fetchComments","getAuthHeaders","token","localStorage","getItem","response","fetch","headers","ok","data","json","error","console","addComment","trim","method","body","JSON","stringify","authorId","content","style","marginTop","padding","border","borderRadius","children","length","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","value","onChange","e","target","placeholder","width","minHeight","onClick","className","map","comment","backgroundColor","fontSize","color","Date","createdAt","toLocaleString","id","fontStyle","_c","$RefreshReg$"],"sources":["C:/project-management-dashboard/src/components/Comments.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction Comments({ entityType, entityId, currentUser = 'demo-user' }) {\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n\n  useEffect(() => {\n    if (entityType && entityId) {\n      fetchComments();\n    }\n  }, [entityType, entityId]);\n\n  const getAuthHeaders = () => {\n    const token = localStorage.getItem('token');\n    return {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    };\n  };\n\n  const fetchComments = async () => {\n    try {\n      const response = await fetch(`http://localhost:8080/api/comments?entityType=${entityType}&entityId=${entityId}`, {\n        headers: getAuthHeaders()\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setComments(data);\n      }\n    } catch (error) {\n      console.error('Error fetching comments:', error);\n    }\n  };\n\n  const addComment = async () => {\n    if (!newComment.trim()) return;\n    \n    try {\n      const response = await fetch('http://localhost:8080/api/comments', {\n        method: 'POST',\n        headers: getAuthHeaders(),\n        body: JSON.stringify({\n          entityType,\n          entityId,\n          authorId: currentUser,\n          content: newComment\n        })\n      });\n      if (response.ok) {\n        setNewComment('');\n        fetchComments();\n      }\n    } catch (error) {\n      console.error('Error adding comment:', error);\n    }\n  };\n\n  return (\n    <div style={{ marginTop: '1rem', padding: '1rem', border: '1px solid #ddd', borderRadius: '4px' }}>\n      <h4>Comments ({comments.length})</h4>\n      \n      <div style={{ marginBottom: '1rem' }}>\n        <textarea\n          value={newComment}\n          onChange={(e) => setNewComment(e.target.value)}\n          placeholder=\"Add a comment...\"\n          style={{ width: '100%', minHeight: '60px', marginBottom: '0.5rem' }}\n        />\n        <button onClick={addComment} className=\"btn btn-primary\">Add Comment</button>\n      </div>\n\n      <div>\n        {comments.map(comment => (\n          <div key={comment.id} style={{ \n            padding: '0.5rem', \n            marginBottom: '0.5rem', \n            backgroundColor: '#f9f9f9', \n            borderRadius: '4px' \n          }}>\n            <div style={{ fontSize: '0.8rem', color: '#666', marginBottom: '0.25rem' }}>\n              <strong>{comment.authorId}</strong> â€¢ {new Date(comment.createdAt).toLocaleString()}\n            </div>\n            <div>{comment.content}</div>\n          </div>\n        ))}\n        {comments.length === 0 && (\n          <div style={{ color: '#666', fontStyle: 'italic' }}>No comments yet</div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Comments;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}