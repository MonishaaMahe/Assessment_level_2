{"ast":null,"code":"var _jsxFileName = \"C:\\\\project-management-dashboard\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ProjectList from './components/ProjectList';\nimport MilestoneBoard from './components/MilestoneBoard';\nimport TaskBoard from './components/TaskBoard';\nimport TeamManagement from './components/TeamManagement';\nimport Dashboard from './components/Dashboard';\nimport Notifications from './components/Notifications';\nimport Login from './components/Login';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentView, setCurrentView] = useState('dashboard');\n  const [projects, setProjects] = useState([]);\n  const [tasks, setTasks] = useState([]);\n  const [selectedProject, setSelectedProject] = useState(null);\n  const [statusFilter, setStatusFilter] = useState(null);\n  const [allTasks, setAllTasks] = useState([]);\n  const [teamMembers, setTeamMembers] = useState([]);\n  const [allTeamMembers, setAllTeamMembers] = useState([]);\n  const fetchAllTeamMembers = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/api/team-members', {\n        headers: getAuthHeaders()\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setAllTeamMembers(data);\n      }\n    } catch (error) {\n      console.error('Error fetching all team members:', error);\n    }\n  };\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const username = localStorage.getItem('username');\n    const fullName = localStorage.getItem('fullName');\n    if (token && username) {\n      setUser({\n        token,\n        username,\n        fullName\n      });\n      fetchProjects();\n      fetchAllTasks();\n      fetchTeamMembers();\n    }\n    setLoading(false);\n  }, []);\n  const getAuthHeaders = () => {\n    const token = localStorage.getItem('token');\n    return {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    };\n  };\n  const fetchProjects = async () => {\n    try {\n      const userRole = localStorage.getItem('userRole') || 'Admin';\n      const username = localStorage.getItem('username');\n      console.log('Fetching projects for:', username, 'with role:', userRole);\n      const url = `http://localhost:8080/api/projects?userId=${username}&role=${userRole}`;\n      const response = await fetch(url, {\n        headers: getAuthHeaders()\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log('Fetched projects:', data.length);\n        setProjects(data);\n      }\n    } catch (error) {\n      console.error('Error fetching projects:', error);\n    }\n  };\n  const fetchAllTasks = async () => {\n    try {\n      const userRole = localStorage.getItem('userRole') || 'Admin';\n      const username = localStorage.getItem('username');\n      const url = `http://localhost:8080/api/tasks?userId=${username}&role=${userRole}`;\n      const response = await fetch(url, {\n        headers: getAuthHeaders()\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setAllTasks(data);\n      }\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n  const fetchTeamMembers = async (projectId = null) => {\n    try {\n      let url = 'http://localhost:8080/api/team-members';\n      if (projectId) {\n        url += `?projectId=${projectId}`;\n      }\n      console.log('Fetching team members from:', url);\n      const response = await fetch(url, {\n        headers: getAuthHeaders()\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log('Team members fetched:', data);\n        setTeamMembers(data);\n      }\n    } catch (error) {\n      console.error('Error fetching team members:', error);\n    }\n  };\n  const addTeamMember = async member => {\n    try {\n      // Check if member already exists for this project\n      const existingMember = teamMembers.find(m => m.userId === member.userId && m.projectId === member.projectId);\n      if (!existingMember) {\n        const response = await fetch('http://localhost:8080/api/team-members', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(member)\n        });\n        if (response.ok) {\n          fetchTeamMembers();\n        }\n      }\n    } catch (error) {\n      console.error('Error creating team member:', error);\n    }\n  };\n  const deleteTeamMember = async memberId => {\n    try {\n      const response = await fetch(`http://localhost:8080/api/team-members/${memberId}`, {\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        fetchTeamMembers();\n      }\n    } catch (error) {\n      console.error('Error deleting team member:', error);\n    }\n  };\n  const updateProject = async (projectId, projectData) => {\n    try {\n      const response = await fetch(`http://localhost:8080/api/projects/${projectId}`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),\n        body: JSON.stringify(projectData)\n      });\n      if (response.ok) {\n        fetchProjects();\n      } else {\n        console.error('Failed to update project:', response.status);\n      }\n    } catch (error) {\n      console.error('Error updating project:', error);\n    }\n  };\n  const addProject = async project => {\n    try {\n      console.log('Creating project:', project);\n      const username = localStorage.getItem('username');\n      const response = await fetch('http://localhost:8080/api/projects', {\n        method: 'POST',\n        headers: getAuthHeaders(),\n        body: JSON.stringify({\n          name: project.name,\n          description: project.description,\n          startDate: project.startDate || null,\n          endDate: project.endDate || null,\n          status: 'NEW',\n          createdBy: username,\n          assignedDevelopers: project.assignedDevelopers || []\n        })\n      });\n      if (response.ok) {\n        const newProject = await response.json();\n        console.log('Project created:', newProject);\n        fetchProjects(); // Refetch to ensure consistency\n      } else {\n        console.error('Failed to create project:', response.status);\n      }\n    } catch (error) {\n      console.error('Error creating project:', error);\n    }\n  };\n  const addMilestone = async (projectId, milestone) => {\n    try {\n      const response = await fetch(`http://localhost:8080/api/projects/${projectId}/milestones`, {\n        method: 'POST',\n        headers: getAuthHeaders(),\n        body: JSON.stringify({\n          title: milestone.title,\n          description: milestone.description,\n          dueDate: milestone.dueDate,\n          completed: false\n        })\n      });\n      if (response.ok) {\n        await fetchProjects();\n        // Find updated project from current projects state\n        const updatedProject = projects.find(p => p.id === projectId);\n        if (updatedProject) {\n          // Refetch the specific project to get updated milestones\n          const projectResponse = await fetch(`http://localhost:8080/api/projects/${projectId}`, {\n            headers: getAuthHeaders()\n          });\n          if (projectResponse.ok) {\n            const refreshedProject = await projectResponse.json();\n            setSelectedProject(refreshedProject);\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error creating milestone:', error);\n    }\n  };\n  const updateMilestone = async (milestoneId, updates) => {\n    try {\n      const response = await fetch(`http://localhost:8080/api/milestones/${milestoneId}`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),\n        body: JSON.stringify(updates)\n      });\n      if (response.ok) {\n        var _updatedProject$miles;\n        await fetchProjects();\n        const updatedProjects = await fetch('http://localhost:8080/api/projects').then(r => r.json());\n        const updatedProject = updatedProjects.find(p => p.id === (selectedProject === null || selectedProject === void 0 ? void 0 : selectedProject.id));\n\n        // Check if all milestones are completed and update project status\n        if ((updatedProject === null || updatedProject === void 0 ? void 0 : (_updatedProject$miles = updatedProject.milestones) === null || _updatedProject$miles === void 0 ? void 0 : _updatedProject$miles.length) > 0) {\n          const allCompleted = updatedProject.milestones.every(m => m.completed);\n          if (allCompleted && updatedProject.status !== 'COMPLETED') {\n            await fetch(`http://localhost:8080/api/projects/${updatedProject.id}`, {\n              method: 'PUT',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                ...updatedProject,\n                status: 'COMPLETED'\n              })\n            });\n            await fetchProjects();\n            const finalProjects = await fetch('http://localhost:8080/api/projects').then(r => r.json());\n            setSelectedProject(finalProjects.find(p => p.id === (selectedProject === null || selectedProject === void 0 ? void 0 : selectedProject.id)));\n          } else {\n            setSelectedProject(updatedProject);\n          }\n        } else {\n          setSelectedProject(updatedProject);\n        }\n      }\n    } catch (error) {\n      console.error('Error updating milestone:', error);\n    }\n  };\n  const addTask = async (projectId, task) => {\n    try {\n      const response = await fetch(`http://localhost:8080/api/projects/${projectId}/tasks`, {\n        method: 'POST',\n        headers: getAuthHeaders(),\n        body: JSON.stringify(task)\n      });\n      if (response.ok) {\n        // If task is assigned to someone, add them as project team member\n        if (task.assignedToUserId) {\n          const assignedMember = teamMembers.find(m => m.userId === task.assignedToUserId);\n          if (assignedMember) {\n            await addTeamMember({\n              userId: assignedMember.userId,\n              name: assignedMember.name,\n              email: assignedMember.email,\n              role: assignedMember.role,\n              projectId: projectId\n            });\n          }\n        }\n        await fetchProjects();\n        await fetchAllTasks();\n        await fetchTeamMembers();\n        const updatedProjects = await fetch('http://localhost:8080/api/projects').then(r => r.json());\n        const updatedProject = updatedProjects.find(p => p.id === projectId);\n        setSelectedProject(updatedProject);\n      }\n    } catch (error) {\n      console.error('Error creating task:', error);\n    }\n  };\n  const updateTask = async (taskId, updates) => {\n    try {\n      const response = await fetch(`http://localhost:8080/api/tasks/${taskId}`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),\n        body: JSON.stringify(updates)\n      });\n      if (response.ok) {\n        // If task is assigned to someone, add them as project team member\n        if (updates.assignedToUserId && selectedProject) {\n          const assignedMember = teamMembers.find(m => m.userId === updates.assignedToUserId);\n          if (assignedMember) {\n            await addTeamMember({\n              ...assignedMember,\n              projectId: selectedProject.id\n            });\n          }\n        }\n        await fetchProjects();\n        await fetchAllTasks();\n        await fetchTeamMembers();\n        const updatedProjects = await fetch('http://localhost:8080/api/projects').then(r => r.json());\n        const updatedProject = updatedProjects.find(p => p.id === (selectedProject === null || selectedProject === void 0 ? void 0 : selectedProject.id));\n        setSelectedProject(updatedProject);\n      }\n    } catch (error) {\n      console.error('Error updating task:', error);\n    }\n  };\n  const deleteTask = async taskId => {\n    try {\n      const response = await fetch(`http://localhost:8080/api/tasks/${taskId}`, {\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        await fetchProjects();\n        await fetchAllTasks();\n        const updatedProjects = await fetch('http://localhost:8080/api/projects').then(r => r.json());\n        const updatedProject = updatedProjects.find(p => p.id === (selectedProject === null || selectedProject === void 0 ? void 0 : selectedProject.id));\n        setSelectedProject(updatedProject);\n      }\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n  };\n  const handleLogin = userData => {\n    setUser(userData);\n    fetchProjects();\n    fetchAllTasks();\n    fetchTeamMembers();\n    fetchAllTeamMembers();\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 12\n    }, this);\n  }\n  if (!user) {\n    return /*#__PURE__*/_jsxDEV(Login, {\n      onLogin: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"navbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Project Management Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: currentView === 'dashboard' ? 'active' : '',\n          onClick: () => setCurrentView('dashboard'),\n          children: \"Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: currentView === 'projects' ? 'active' : '',\n          onClick: () => setCurrentView('projects'),\n          children: \"Projects\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: currentView === 'milestones' ? 'active' : '',\n          onClick: () => setCurrentView('milestones'),\n          children: \"Milestones\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: currentView === 'tasks' ? 'active' : '',\n          onClick: () => setCurrentView('tasks'),\n          children: \"Tasks\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: currentView === 'team' ? 'active' : '',\n          onClick: () => setCurrentView('team'),\n          children: \"Team\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          gap: '1rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontSize: '0.9rem',\n            color: '#666'\n          },\n          children: [\"Welcome, \", (user === null || user === void 0 ? void 0 : user.fullName) || (user === null || user === void 0 ? void 0 : user.username), \" (\", localStorage.getItem('userRole') || 'Admin', \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            localStorage.clear();\n            setUser(null);\n          },\n          style: {\n            background: '#e74c3c',\n            color: 'white',\n            border: 'none',\n            padding: '0.5rem 1rem',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          },\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-content\",\n      children: [currentView === 'dashboard' && /*#__PURE__*/_jsxDEV(Dashboard, {\n        projects: projects,\n        onNavigate: (view, filter) => {\n          setCurrentView(view);\n          setStatusFilter(filter);\n        },\n        onSelectProject: setSelectedProject\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 11\n      }, this), currentView === 'projects' && /*#__PURE__*/_jsxDEV(ProjectList, {\n        projects: statusFilter ? projects.filter(p => p.status === statusFilter) : projects,\n        onAddProject: addProject,\n        onSelectProject: project => {\n          setSelectedProject(project);\n          setCurrentView('milestones');\n        },\n        statusFilter: statusFilter,\n        onClearFilter: () => setStatusFilter(null),\n        teamMembers: teamMembers,\n        user: user,\n        onUpdateProject: updateProject,\n        allTeamMembers: allTeamMembers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 11\n      }, this), currentView === 'milestones' && /*#__PURE__*/_jsxDEV(MilestoneBoard, {\n        selectedProject: selectedProject,\n        allProjects: projects,\n        onAddMilestone: addMilestone,\n        onUpdateMilestone: updateMilestone\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 11\n      }, this), currentView === 'tasks' && /*#__PURE__*/_jsxDEV(TaskBoard, {\n        selectedProject: selectedProject,\n        allTasks: allTasks,\n        teamMembers: teamMembers,\n        projects: projects,\n        onAddTask: addTask,\n        onUpdateTask: updateTask,\n        onDeleteTask: deleteTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 11\n      }, this), currentView === 'team' && /*#__PURE__*/_jsxDEV(TeamManagement, {\n        teamMembers: teamMembers,\n        selectedProject: selectedProject,\n        onAddTeamMember: addTeamMember,\n        onDeleteTeamMember: deleteTeamMember,\n        onFetchTeamMembers: fetchTeamMembers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 373,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"wyFw9LrGEK2UwawTmlSPonh04aM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ProjectList","MilestoneBoard","TaskBoard","TeamManagement","Dashboard","Notifications","Login","jsxDEV","_jsxDEV","App","_s","currentView","setCurrentView","projects","setProjects","tasks","setTasks","selectedProject","setSelectedProject","statusFilter","setStatusFilter","allTasks","setAllTasks","teamMembers","setTeamMembers","allTeamMembers","setAllTeamMembers","fetchAllTeamMembers","response","fetch","headers","getAuthHeaders","ok","data","json","error","console","user","setUser","loading","setLoading","token","localStorage","getItem","username","fullName","fetchProjects","fetchAllTasks","fetchTeamMembers","userRole","log","url","length","projectId","addTeamMember","member","existingMember","find","m","userId","method","body","JSON","stringify","deleteTeamMember","memberId","updateProject","projectData","status","addProject","project","name","description","startDate","endDate","createdBy","assignedDevelopers","newProject","addMilestone","milestone","title","dueDate","completed","updatedProject","p","id","projectResponse","refreshedProject","updateMilestone","milestoneId","updates","_updatedProject$miles","updatedProjects","then","r","milestones","allCompleted","every","finalProjects","addTask","task","assignedToUserId","assignedMember","email","role","updateTask","taskId","deleteTask","handleLogin","userData","children","fileName","_jsxFileName","lineNumber","columnNumber","onLogin","className","onClick","style","display","alignItems","gap","fontSize","color","clear","background","border","padding","borderRadius","cursor","onNavigate","view","filter","onSelectProject","onAddProject","onClearFilter","onUpdateProject","allProjects","onAddMilestone","onUpdateMilestone","onAddTask","onUpdateTask","onDeleteTask","onAddTeamMember","onDeleteTeamMember","onFetchTeamMembers","_c","$RefreshReg$"],"sources":["C:/project-management-dashboard/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ProjectList from './components/ProjectList';\nimport MilestoneBoard from './components/MilestoneBoard';\nimport TaskBoard from './components/TaskBoard';\nimport TeamManagement from './components/TeamManagement';\nimport Dashboard from './components/Dashboard';\nimport Notifications from './components/Notifications';\nimport Login from './components/Login';\nimport './App.css';\n\nfunction App() {\n  const [currentView, setCurrentView] = useState('dashboard');\n  const [projects, setProjects] = useState([]);\n  const [tasks, setTasks] = useState([]);\n  const [selectedProject, setSelectedProject] = useState(null);\n  const [statusFilter, setStatusFilter] = useState(null);\n  const [allTasks, setAllTasks] = useState([]);\n  const [teamMembers, setTeamMembers] = useState([]);\n  const [allTeamMembers, setAllTeamMembers] = useState([]);\n  \n  const fetchAllTeamMembers = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/api/team-members', {\n        headers: getAuthHeaders()\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setAllTeamMembers(data);\n      }\n    } catch (error) {\n      console.error('Error fetching all team members:', error);\n    }\n  };\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const username = localStorage.getItem('username');\n    const fullName = localStorage.getItem('fullName');\n    \n    if (token && username) {\n      setUser({ token, username, fullName });\n      fetchProjects();\n      fetchAllTasks();\n      fetchTeamMembers();\n    }\n    setLoading(false);\n  }, []);\n\n  const getAuthHeaders = () => {\n    const token = localStorage.getItem('token');\n    return {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    };\n  };\n\n  const fetchProjects = async () => {\n    try {\n      const userRole = localStorage.getItem('userRole') || 'Admin';\n      const username = localStorage.getItem('username');\n      console.log('Fetching projects for:', username, 'with role:', userRole);\n      const url = `http://localhost:8080/api/projects?userId=${username}&role=${userRole}`;\n      \n      const response = await fetch(url, {\n        headers: getAuthHeaders()\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log('Fetched projects:', data.length);\n        setProjects(data);\n      }\n    } catch (error) {\n      console.error('Error fetching projects:', error);\n    }\n  };\n\n  const fetchAllTasks = async () => {\n    try {\n      const userRole = localStorage.getItem('userRole') || 'Admin';\n      const username = localStorage.getItem('username');\n      const url = `http://localhost:8080/api/tasks?userId=${username}&role=${userRole}`;\n      \n      const response = await fetch(url, {\n        headers: getAuthHeaders()\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setAllTasks(data);\n      }\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n\n  const fetchTeamMembers = async (projectId = null) => {\n    try {\n      let url = 'http://localhost:8080/api/team-members';\n      if (projectId) {\n        url += `?projectId=${projectId}`;\n      }\n      \n      console.log('Fetching team members from:', url);\n      const response = await fetch(url, {\n        headers: getAuthHeaders()\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log('Team members fetched:', data);\n        setTeamMembers(data);\n      }\n    } catch (error) {\n      console.error('Error fetching team members:', error);\n    }\n  };\n\n  const addTeamMember = async (member) => {\n    try {\n      // Check if member already exists for this project\n      const existingMember = teamMembers.find(m => \n        m.userId === member.userId && m.projectId === member.projectId\n      );\n      \n      if (!existingMember) {\n        const response = await fetch('http://localhost:8080/api/team-members', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(member),\n        });\n        if (response.ok) {\n          fetchTeamMembers();\n        }\n      }\n    } catch (error) {\n      console.error('Error creating team member:', error);\n    }\n  };\n\n  const deleteTeamMember = async (memberId) => {\n    try {\n      const response = await fetch(`http://localhost:8080/api/team-members/${memberId}`, {\n        method: 'DELETE',\n      });\n      if (response.ok) {\n        fetchTeamMembers();\n      }\n    } catch (error) {\n      console.error('Error deleting team member:', error);\n    }\n  };\n\n\n\n  const updateProject = async (projectId, projectData) => {\n    try {\n      const response = await fetch(`http://localhost:8080/api/projects/${projectId}`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),\n        body: JSON.stringify(projectData),\n      });\n      \n      if (response.ok) {\n        fetchProjects();\n      } else {\n        console.error('Failed to update project:', response.status);\n      }\n    } catch (error) {\n      console.error('Error updating project:', error);\n    }\n  };\n\n  const addProject = async (project) => {\n    try {\n      console.log('Creating project:', project);\n      const username = localStorage.getItem('username');\n      const response = await fetch('http://localhost:8080/api/projects', {\n        method: 'POST',\n        headers: getAuthHeaders(),\n        body: JSON.stringify({\n          name: project.name,\n          description: project.description,\n          startDate: project.startDate || null,\n          endDate: project.endDate || null,\n          status: 'NEW',\n          createdBy: username,\n          assignedDevelopers: project.assignedDevelopers || []\n        }),\n      });\n      \n      if (response.ok) {\n        const newProject = await response.json();\n        console.log('Project created:', newProject);\n        fetchProjects(); // Refetch to ensure consistency\n      } else {\n        console.error('Failed to create project:', response.status);\n      }\n    } catch (error) {\n      console.error('Error creating project:', error);\n    }\n  };\n\n  const addMilestone = async (projectId, milestone) => {\n    try {\n      const response = await fetch(`http://localhost:8080/api/projects/${projectId}/milestones`, {\n        method: 'POST',\n        headers: getAuthHeaders(),\n        body: JSON.stringify({\n          title: milestone.title,\n          description: milestone.description,\n          dueDate: milestone.dueDate,\n          completed: false\n        }),\n      });\n      if (response.ok) {\n        await fetchProjects();\n        // Find updated project from current projects state\n        const updatedProject = projects.find(p => p.id === projectId);\n        if (updatedProject) {\n          // Refetch the specific project to get updated milestones\n          const projectResponse = await fetch(`http://localhost:8080/api/projects/${projectId}`, {\n            headers: getAuthHeaders()\n          });\n          if (projectResponse.ok) {\n            const refreshedProject = await projectResponse.json();\n            setSelectedProject(refreshedProject);\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error creating milestone:', error);\n    }\n  };\n\n  const updateMilestone = async (milestoneId, updates) => {\n    try {\n      const response = await fetch(`http://localhost:8080/api/milestones/${milestoneId}`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),\n        body: JSON.stringify(updates),\n      });\n      if (response.ok) {\n        await fetchProjects();\n        const updatedProjects = await fetch('http://localhost:8080/api/projects').then(r => r.json());\n        const updatedProject = updatedProjects.find(p => p.id === selectedProject?.id);\n        \n        // Check if all milestones are completed and update project status\n        if (updatedProject?.milestones?.length > 0) {\n          const allCompleted = updatedProject.milestones.every(m => m.completed);\n          if (allCompleted && updatedProject.status !== 'COMPLETED') {\n            await fetch(`http://localhost:8080/api/projects/${updatedProject.id}`, {\n              method: 'PUT',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({ ...updatedProject, status: 'COMPLETED' })\n            });\n            await fetchProjects();\n            const finalProjects = await fetch('http://localhost:8080/api/projects').then(r => r.json());\n            setSelectedProject(finalProjects.find(p => p.id === selectedProject?.id));\n          } else {\n            setSelectedProject(updatedProject);\n          }\n        } else {\n          setSelectedProject(updatedProject);\n        }\n      }\n    } catch (error) {\n      console.error('Error updating milestone:', error);\n    }\n  };\n\n  const addTask = async (projectId, task) => {\n    try {\n      const response = await fetch(`http://localhost:8080/api/projects/${projectId}/tasks`, {\n        method: 'POST',\n        headers: getAuthHeaders(),\n        body: JSON.stringify(task),\n      });\n      if (response.ok) {\n        // If task is assigned to someone, add them as project team member\n        if (task.assignedToUserId) {\n          const assignedMember = teamMembers.find(m => m.userId === task.assignedToUserId);\n          if (assignedMember) {\n            await addTeamMember({\n              userId: assignedMember.userId,\n              name: assignedMember.name,\n              email: assignedMember.email,\n              role: assignedMember.role,\n              projectId: projectId\n            });\n          }\n        }\n        \n        await fetchProjects();\n        await fetchAllTasks();\n        await fetchTeamMembers();\n        const updatedProjects = await fetch('http://localhost:8080/api/projects').then(r => r.json());\n        const updatedProject = updatedProjects.find(p => p.id === projectId);\n        setSelectedProject(updatedProject);\n      }\n    } catch (error) {\n      console.error('Error creating task:', error);\n    }\n  };\n\n  const updateTask = async (taskId, updates) => {\n    try {\n      const response = await fetch(`http://localhost:8080/api/tasks/${taskId}`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),\n        body: JSON.stringify(updates),\n      });\n      if (response.ok) {\n        // If task is assigned to someone, add them as project team member\n        if (updates.assignedToUserId && selectedProject) {\n          const assignedMember = teamMembers.find(m => m.userId === updates.assignedToUserId);\n          if (assignedMember) {\n            await addTeamMember({\n              ...assignedMember,\n              projectId: selectedProject.id\n            });\n          }\n        }\n        \n        await fetchProjects();\n        await fetchAllTasks();\n        await fetchTeamMembers();\n        const updatedProjects = await fetch('http://localhost:8080/api/projects').then(r => r.json());\n        const updatedProject = updatedProjects.find(p => p.id === selectedProject?.id);\n        setSelectedProject(updatedProject);\n      }\n    } catch (error) {\n      console.error('Error updating task:', error);\n    }\n  };\n\n  const deleteTask = async (taskId) => {\n    try {\n      const response = await fetch(`http://localhost:8080/api/tasks/${taskId}`, {\n        method: 'DELETE',\n      });\n      if (response.ok) {\n        await fetchProjects();\n        await fetchAllTasks();\n        const updatedProjects = await fetch('http://localhost:8080/api/projects').then(r => r.json());\n        const updatedProject = updatedProjects.find(p => p.id === selectedProject?.id);\n        setSelectedProject(updatedProject);\n      }\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n  };\n\n  const handleLogin = (userData) => {\n    setUser(userData);\n    fetchProjects();\n    fetchAllTasks();\n    fetchTeamMembers();\n    fetchAllTeamMembers();\n  };\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (!user) {\n    return <Login onLogin={handleLogin} />;\n  }\n\n  return (\n    <div className=\"app\">\n      <nav className=\"navbar\">\n        <h1>Project Management Dashboard</h1>\n        <div className=\"nav-buttons\">\n          <button \n            className={currentView === 'dashboard' ? 'active' : ''}\n            onClick={() => setCurrentView('dashboard')}\n          >\n            Dashboard\n          </button>\n          <button \n            className={currentView === 'projects' ? 'active' : ''}\n            onClick={() => setCurrentView('projects')}\n          >\n            Projects\n          </button>\n          <button \n            className={currentView === 'milestones' ? 'active' : ''}\n            onClick={() => setCurrentView('milestones')}\n          >\n            Milestones\n          </button>\n          <button \n            className={currentView === 'tasks' ? 'active' : ''}\n            onClick={() => setCurrentView('tasks')}\n          >\n            Tasks\n          </button>\n          <button \n            className={currentView === 'team' ? 'active' : ''}\n            onClick={() => setCurrentView('team')}\n          >\n            Team\n          </button>\n        </div>\n\n        <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>\n          <span style={{ fontSize: '0.9rem', color: '#666' }}>Welcome, {user?.fullName || user?.username} ({localStorage.getItem('userRole') || 'Admin'})</span>\n          <button \n            onClick={() => {\n              localStorage.clear();\n              setUser(null);\n            }}\n            style={{ \n              background: '#e74c3c', \n              color: 'white', \n              border: 'none', \n              padding: '0.5rem 1rem', \n              borderRadius: '4px',\n              cursor: 'pointer'\n            }}\n          >\n            Logout\n          </button>\n        </div>\n      </nav>\n\n      <main className=\"main-content\">\n        {currentView === 'dashboard' && (\n          <Dashboard \n            projects={projects} \n            onNavigate={(view, filter) => {\n              setCurrentView(view);\n              setStatusFilter(filter);\n            }}\n            onSelectProject={setSelectedProject}\n          />\n        )}\n        {currentView === 'projects' && (\n          <ProjectList \n            projects={statusFilter ? projects.filter(p => p.status === statusFilter) : projects}\n            onAddProject={addProject}\n            onSelectProject={(project) => {\n              setSelectedProject(project);\n              setCurrentView('milestones');\n            }}\n            statusFilter={statusFilter}\n            onClearFilter={() => setStatusFilter(null)}\n            teamMembers={teamMembers}\n            user={user}\n            onUpdateProject={updateProject}\n            allTeamMembers={allTeamMembers}\n          />\n        )}\n        {currentView === 'milestones' && (\n          <MilestoneBoard \n            selectedProject={selectedProject}\n            allProjects={projects}\n            onAddMilestone={addMilestone}\n            onUpdateMilestone={updateMilestone}\n          />\n        )}\n        {currentView === 'tasks' && (\n          <TaskBoard \n            selectedProject={selectedProject}\n            allTasks={allTasks}\n            teamMembers={teamMembers}\n            projects={projects}\n            onAddTask={addTask}\n            onUpdateTask={updateTask}\n            onDeleteTask={deleteTask}\n          />\n        )}\n        {currentView === 'team' && (\n          <TeamManagement \n            teamMembers={teamMembers}\n            selectedProject={selectedProject}\n            onAddTeamMember={addTeamMember}\n            onDeleteTeamMember={deleteTeamMember}\n            onFetchTeamMembers={fetchTeamMembers}\n          />\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}